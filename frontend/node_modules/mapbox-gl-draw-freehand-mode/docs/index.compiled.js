(()=>{"use strict";const e="add",t="polygon",o="Feature",n="Polygon",r="simple_select",i="vertex",a="true",s="false";function u(e){const t=e.featureTarget;return!!t&&!!t.properties&&t.properties.meta===i}const c={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}};function l(e,t,n,r){return{type:o,properties:{meta:i,parent:e,coord_path:n,active:r?a:s},geometry:{type:"Point",coordinates:t}}}const p={onSetup:function(){const r=this.newFeature({type:o,properties:{},geometry:{type:n,coordinates:[[]]}});return this.addFeature(r),this.clearSelectedFeatures(),c.disable(this),this.updateUIClasses({mouse:e}),this.activateUIButton(t),this.setActionableState({trash:!0}),{polygon:r,currentVertexPosition:0}},clickAnywhere:function(t,o){if(t.currentVertexPosition>0&&(n=o,i=t.polygon.coordinates[0][t.currentVertexPosition-1],n.lngLat&&n.lngLat.lng===i[0]&&n.lngLat.lat===i[1]))return this.changeMode(r,{featureIds:[t.polygon.id]});var n,i;this.updateUIClasses({mouse:e}),t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat),t.currentVertexPosition++,t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(r,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),u(t)&&this.updateUIClasses({mouse:"pointer"})}};p.onTap=p.onClick=function(e,t){return u(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},p.onKeyUp=function(e,t){!function(e){return 27===e.keyCode}(t)?function(e){return 13===e.keyCode}(t)&&this.changeMode(r,{featureIds:[e.polygon.id]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(r))},p.onStop=function(e){this.updateUIClasses({mouse:"none"}),c.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate(`0.${e.currentVertexPosition}`),e.polygon.isValid()?this.map.fire("draw.create",{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(r,{},{silent:!0})))},p.toDisplayFeatures=function(e,t,n){const r=t.properties.id===e.polygon.id;if(t.properties.active=r?a:s,!r)return n(t);if(0===t.geometry.coordinates.length)return;const i=t.geometry.coordinates[0].length;if(!(i<3)){if(t.properties.meta="feature",n(l(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),i>3){const o=t.geometry.coordinates[0].length-3;n(l(e.polygon.id,t.geometry.coordinates[0][o],`0.${o}`,!1))}if(i<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(n({type:o,properties:t.properties,geometry:{coordinates:e,type:"LineString"}}),3===i)return}return n(t)}},p.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(r)};const g=p;function d(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function y(e){var t=d(e);if(2===t.length&&!f(t[0],t[1]))return t;var o=[],n=t.length-1,r=o.length;o.push(t[0]);for(var i=1;i<n;i++){var a=o[o.length-1];t[i][0]===a[0]&&t[i][1]===a[1]||(o.push(t[i]),(r=o.length)>2&&h(o[r-3],o[r-1],o[r-2])&&o.splice(o.length-2,1))}if(o.push(t[t.length-1]),r=o.length,f(t[0],t[t.length-1])&&r<4)throw new Error("invalid polygon");return h(o[r-3],o[r-1],o[r-2])&&o.splice(o.length-2,1),o}function f(e,t){return e[0]===t[0]&&e[1]===t[1]}function h(e,t,o){var n=o[0],r=o[1],i=e[0],a=e[1],s=t[0],u=t[1],c=s-i,l=u-a;return 0==(n-i)*l-(r-a)*c&&(Math.abs(c)>=Math.abs(l)?c>0?i<=n&&n<=s:s<=n&&n<=i:l>0?a<=r&&r<=u:u<=r&&r<=a)}function m(e){var t={type:"Feature"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}})),t.properties=b(e.properties),t.geometry=v(e.geometry),t}function b(e){var t={};return e?(Object.keys(e).forEach((function(o){var n=e[o];"object"==typeof n?null===n?t[o]=null:Array.isArray(n)?t[o]=n.map((function(e){return e})):t[o]=b(n):t[o]=n})),t):t}function v(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((function(e){return v(e)})),t):(t.coordinates=x(e.coordinates),t)}function x(e){var t=e;return"object"!=typeof t[0]?t.slice():t.map((function(e){return x(e)}))}function w(e,t,o){var n=t.x,r=t.y,i=o.x-n,a=o.y-r;if(0!==i||0!==a){var s=((e.x-n)*i+(e.y-r)*a)/(i*i+a*a);s>1?(n=o.x,r=o.y):s>0&&(n+=i*s,r+=a*s)}return(i=e.x-n)*i+(a=e.y-r)*a}function C(e,t,o,n,r){for(var i,a=n,s=t+1;s<o;s++){var u=w(e[s],e[t],e[o]);u>a&&(i=s,a=u)}a>n&&(i-t>1&&C(e,t,i,n,r),r.push(e[i]),o-i>1&&C(e,i,o,n,r))}function M(e,t){var o=e.length-1,n=[e[0]];return C(e,0,o,t,n),n.push(e[o]),n}function P(e,t,o){if(e.length<=2)return e;var n=void 0!==t?t*t:1;return M(e=o?e:function(e,t){for(var o,n,r,i,a,s=e[0],u=[s],c=1,l=e.length;c<l;c++)r=s,void 0,void 0,(i=(n=o=e[c]).x-r.x)*i+(a=n.y-r.y)*a>t&&(u.push(o),s=o);return s!==o&&u.push(o),u}(e,n),n)}function k(e,t,o){return P(e.map((function(e){return{x:e[0],y:e[1],z:e[2]}})),t,o).map((function(e){return e.z?[e.x,e.y,e.z]:[e.x,e.y]}))}function F(e,t,o){return e.map((function(e){var n=e.map((function(e){return{x:e[0],y:e[1]}}));if(n.length<4)throw new Error("invalid polygon");for(var r=P(n,t,o).map((function(e){return[e.x,e.y]}));!S(r);)r=P(n,t-=.01*t,o).map((function(e){return[e.x,e.y]}));return r[r.length-1][0]===r[0][0]&&r[r.length-1][1]===r[0][1]||r.push(r[0]),r}))}function S(e){return!(e.length<3||3===e.length&&e[2][0]===e[0][0]&&e[2][1]===e[0][1])}const L=function(e,t){if(!(o=t=t||{})||o.constructor!==Object)throw new Error("options is invalid");var o,n=void 0!==t.tolerance?t.tolerance:1,r=t.highQuality||!1,i=t.mutate||!1;if(!e)throw new Error("geojson is required");if(n&&n<0)throw new Error("invalid tolerance");return!0!==i&&(e=function(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return m(e);case"FeatureCollection":return function(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"features":return;default:t[o]=e[o]}})),t.features=e.features.map((function(e){return m(e)})),t}(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return v(e);default:throw new Error("unknown GeoJSON type")}}(e)),function(e,t){var o,n,r,i,a,s,u,c,l,p,g=0,d="FeatureCollection"===e.type,y="Feature"===e.type,f=d?e.features.length:1;for(o=0;o<f;o++){for(s=d?e.features[o].geometry:y?e.geometry:e,c=d?e.features[o].properties:y?e.properties:{},l=d?e.features[o].bbox:y?e.bbox:void 0,p=d?e.features[o].id:y?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,r=0;r<a;r++)if(null!==(i=u?s.geometries[r]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,g,c,l,p))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],g,c,l,p))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,g,c,l,p))return!1;g++}}(e,(function(e){!function(e,t,o){var n=e.type;if("Point"===n||"MultiPoint"===n)return e;!function(e,t){void 0===t&&(t={});var o="object"==typeof t?t.mutate:t;if(!e)throw new Error("geojson is required");var n=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}(e),r=[];switch(n){case"LineString":r=y(e);break;case"MultiLineString":case"Polygon":d(e).forEach((function(e){r.push(y(e))}));break;case"MultiPolygon":d(e).forEach((function(e){var t=[];e.forEach((function(e){t.push(y(e))})),r.push(t)}));break;case"Point":return e;case"MultiPoint":var i={};d(e).forEach((function(e){var t=e.join("-");i.hasOwnProperty(t)||(r.push(e),i[t]=!0)}));break;default:throw new Error(n+" geometry not supported")}e.coordinates?!0===o&&(e.coordinates=r):!0===o?e.geometry.coordinates=r:function(e,t,o){void 0===o&&(o={});var n={type:"Feature"};(0===o.id||o.id)&&(n.id=o.id),o.bbox&&(n.bbox=o.bbox),n.properties=t||{},n.geometry=e}({type:n,coordinates:r},e.properties,{bbox:e.bbox,id:e.id})}(e,!0);var r=e.coordinates;switch(n){case"LineString":e.coordinates=k(r,t,o);break;case"MultiLineString":e.coordinates=r.map((function(e){return k(e,t,o)}));break;case"Polygon":e.coordinates=F(r,t,o);break;case"MultiPolygon":e.coordinates=r.map((function(e){return F(e,t,o)}))}}(e,n,r)})),e},E=Object.assign({},g);E.onSetup=function(){const r=this.newFeature({type:o,properties:{},geometry:{type:n,coordinates:[[]]}});return this.addFeature(r),this.clearSelectedFeatures(),setTimeout((()=>{this.map&&this.map.dragPan&&this.map.dragPan.disable()}),0),this.updateUIClasses({mouse:e}),this.activateUIButton(t),this.setActionableState({trash:!0}),{polygon:r,currentVertexPosition:0,dragMoving:!1}},E.onDrag=E.onTouchMove=function(t,o){t.dragMoving=!0,this.updateUIClasses({mouse:e}),t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat),t.currentVertexPosition++,t.polygon.updateCoordinate(`0.${t.currentVertexPosition}`,o.lngLat.lng,o.lngLat.lat)},E.onMouseUp=function(e,t){e.dragMoving&&(this.simplify(e.polygon),this.fireUpdate(),this.changeMode(r,{featureIds:[e.polygon.id]}))},E.onTouchEnd=function(e,t){this.onMouseUp(e,t)},E.fireUpdate=function(){this.map.fire("draw.update",{action:"move",features:this.getSelected().map((e=>e.toGeoJSON()))})},E.simplify=function(e){const t=1/Math.pow(1.05,10*this.map.getZoom());L(e,{mutate:!0,tolerance:t,highQuality:!0})};const V=E;mapboxgl.accessToken="pk.eyJ1IjoiYmVuZWhta2UiLCJhIjoiY2plYTl6b3c2MHg5ODJxbGV4aXR4Z3p6YSJ9.d3jSAbsqSmpJwyVcp9iXbw";var I=new mapboxgl.Map({container:document.getElementById("map"),style:"mapbox://styles/mapbox/streets-v11",center:[-94.737236,32.514885],zoom:12}),j=new MapboxDraw({modes:Object.assign(MapboxDraw.modes,{draw_polygon:V})});I.addControl(j,"top-left"),I.on("draw.create",(function(){console.log(arguments,j.getAll())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,